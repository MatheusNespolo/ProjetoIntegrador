Programa PID parcial
#include <PID_v1.h>

// Definindo os pinos
#define PINO_FLUXO D5 // Pino para o sensor de fluxo
#define PINO_PWM D4   // Pino para o controle PWM da bomba

// Definindo as constantes do PID (ajuste conforme o seu sistema)
double Kp = 10, Ki = 0.5, Kd = 0.2;

// Variáveis para o PID
double setPoint, input, output;

// Variáveis para a vazão
volatile int pulsos = 0;
float vazao = 0;
unsigned long tempoAnterior = 0;

// Configuração do objeto PID
PID meuPID(&input, &output, &setPoint, Kp, Ki, Kd, DIRECT);

// Função de interrupção para o sensor de fluxo
void contarPulsos() {
  pulsos++;
}

void setup() {
  Serial.begin(115200);

  // Configuração dos pinos
  pinMode(PINO_FLUXO, INPUT_PULLUP);
  pinMode(PINO_PWM, OUTPUT);

  // Inicialização do PID
  setPoint = 5.0; // Vazão desejada em L/min
  meuPID.SetMode(AUTOMATIC);
  meuPID.SetOutputLimits(0, 255); // Limite da saída PWM

  // Configuração da interrupção
  attachInterrupt(digitalPinToInterrupt(PINO_FLUXO), contarPulsos, RISING);

  // Inicialização do controle PWM
  analogWrite(PINO_PWM, 0);
}

void loop() {
  if (millis() - tempoAnterior > 1000) {
    detachInterrupt(digitalPinToInterrupt(PINO_FLUXO));
    
    // Cálculo da vazão em L/min (ajuste a constante com base no seu sensor)
    vazao = (pulsos * 2.25) / 60.0; 
    
    // Reset das variáveis
    pulsos = 0;
    tempoAnterior = millis();
    attachInterrupt(digitalPinToInterrupt(PINO_FLUXO), contarPulsos, RISING);

    // Atualiza a entrada do PID
    input = vazao;
    
    // Calcula a saída do PID
    meuPID.Compute();

    // Aplica a saída PWM na bomba
    analogWrite(PINO_PWM, output);

    // Exibe os dados no monitor serial
    Serial.print("Vazão Atual: ");
    Serial.print(input);
    Serial.print(" L/min | PWM: ");
    Serial.println(output);
  }
}
